================================================================================
              COOK MCP WRAPPER - ARCHITECTURE DIAGRAM
           MCP Interoperability: Python ↔ TypeScript ↔ HTTP
================================================================================

┌────────────────────────────────────────────────────────────────────────────┐
│                                                                            │
│                          👤 USER INTERFACE                                 │
│                                                                            │
│  ┌──────────────────────────────────────────────────────────────────────┐ │
│  │                        Claude Desktop                                 │ │
│  │                   (Anthropic AI Assistant)                            │ │
│  │                                                                        │ │
│  │  Tools available:                                                     │ │
│  │  • search_engineering_manual                                          │ │
│  │  • get_page_direct                                                    │ │
│  │  • health_check                                                       │ │
│  └──────────────────────────────────────────────────────────────────────┘ │
│                                    │                                       │
│                                    │ stdio (JSON-RPC over stdin/stdout)   │
│                                    ↓                                       │
└────────────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────────────┐
│                                                                            │
│                     🌉 PROTOCOL BRIDGE LAYER (NEW)                         │
│                                                                            │
│  ┌──────────────────────────────────────────────────────────────────────┐ │
│  │                    stdio-bridge-final.mjs                             │ │
│  │                   (Node.js + MCP SDK v1.20)                           │ │
│  │                                                                        │ │
│  │  Purpose: Convert stdio ↔ HTTP protocols                             │ │
│  │  - Listens on stdio (line-by-line JSON-RPC)                           │ │
│  │  - Makes HTTP POST requests to mcp-lite worker                        │ │
│  │  - Handles protocol version negotiation                               │ │
│  │  - ~100 lines of JavaScript                                           │ │
│  └──────────────────────────────────────────────────────────────────────┘ │
│                                    │                                       │
│                                    │ HTTP/JSON-RPC                         │
│                                    ↓                                       │
└────────────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────────────┐
│                                                                            │
│           ⚡ MCP-LITE ON CLOUDFLARE WORKERS (NEW - HACK REQUIREMENT)       │
│                                                                            │
│  ┌──────────────────────────────────────────────────────────────────────┐ │
│  │                        src/index.ts                                   │ │
│  │              (TypeScript + mcp-lite v0.8.2)                           │ │
│  │            Running on: http://localhost:8787                          │ │
│  │                                                                        │ │
│  │  Purpose: Web-accessible MCP server                                   │ │
│  │  - Exposes tools via HTTP/JSON-RPC                                    │ │
│  │  - Proxies requests to Python HTTP API                                │ │
│  │  - Deployable to Cloudflare edge network                              │ │
│  │  - ~200 lines of TypeScript                                           │ │
│  │                                                                        │ │
│  │  Tools defined:                                                       │ │
│  │  • search_engineering_manual(query: string)                           │ │
│  │  • get_page_direct(page_number: number)                               │ │
│  │  • health_check()                                                     │ │
│  └──────────────────────────────────────────────────────────────────────┘ │
│                                    │                                       │
│                                    │ HTTP POST                             │
│                                    ↓                                       │
└────────────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────────────┐
│                                                                            │
│                    🔌 HTTP API WRAPPER LAYER (NEW)                         │
│                                                                            │
│  ┌──────────────────────────────────────────────────────────────────────┐ │
│  │                      http_wrapper.py                                  │ │
│  │                    (Python + Flask + CORS)                            │ │
│  │             Running on: http://localhost:5001                         │ │
│  │                                                                        │ │
│  │  Purpose: RESTful API for Python MCP server                           │ │
│  │  - Exposes MCP functionality via HTTP                                 │ │
│  │  - Handles CORS for web access                                        │ │
│  │  - Connects to Weaviate and OpenAI                                    │ │
│  │  - ~200 lines of Python                                               │ │
│  │                                                                        │ │
│  │  Endpoints:                                                           │ │
│  │  GET  /health       - Health check                                    │ │
│  │  GET  /tools        - List available tools                            │ │
│  │  POST /call-tool    - Execute tool                                    │ │
│  └──────────────────────────────────────────────────────────────────────┘ │
│                                    │                                       │
│                                    │ Direct function calls                 │
│                                    ↓                                       │
└────────────────────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────────────────────┐
│                                                                            │
│                   🧠 AI BACKEND LAYER (EXISTING)                           │
│                                                                            │
│  ┌──────────────────────────────────────────────────────────────────────┐ │
│  │                     mcp_cook_server.py                                │ │
│  │                 (Python MCP Server - stdio)                           │ │
│  │                                                                        │ │
│  │  Purpose: Core AI-powered document analysis                           │ │
│  │  - Original MCP server implementation                                 │ │
│  │  - Can also run standalone with Claude Desktop                        │ │
│  │  - Handles all Weaviate and OpenAI interactions                       │ │
│  └──────────────────────────────────────────────────────────────────────┘ │
│         │                                  │                               │
│         │ Vector search                    │ Vision analysis               │
│         ↓                                  ↓                               │
│  ┌────────────────┐              ┌─────────────────────┐                  │
│  │   Weaviate     │              │  OpenAI GPT-4o      │                  │
│  │ Vector Database│              │   Vision API        │                  │
│  │                │              │                     │                  │
│  │ • 150 pages    │              │ • Analyzes diagrams │                  │
│  │ • Embeddings   │              │ • Reads maps/charts │                  │
│  │ • Semantic     │              │ • Extracts specs    │                  │
│  │   search       │              │ • Max 1500 tokens   │                  │
│  └────────────────┘              └─────────────────────┘                  │
│                                                                            │
└────────────────────────────────────────────────────────────────────────────┘

================================================================================
                              DATA FLOW EXAMPLE
================================================================================

User asks: "Is Missouri a high wind zone?"

1. Claude Desktop → stdio bridge
   ├─ Method: tools/call
   └─ Params: {name: "search_engineering_manual", arguments: {query: "..."}}

2. stdio bridge → mcp-lite Worker (HTTP POST)
   ├─ URL: http://localhost:8787
   └─ Body: JSON-RPC request

3. mcp-lite Worker → Python HTTP API (HTTP POST)
   ├─ URL: http://localhost:5001/call-tool
   └─ Body: {name: "search_engineering_manual", arguments: {...}}

4. Python HTTP API → Python MCP Server
   └─ Calls: search_engineering_manual(query="...")

5. Python MCP Server → Weaviate
   ├─ Performs vector search
   └─ Retrieves 5 most relevant chunks + images

6. Python MCP Server → OpenAI GPT-4o
   ├─ Sends: query + text context + base64 wind zone map image
   └─ Receives: "Yes, Missouri is in Wind Zone II, requiring..."

7. Response bubbles back up through all layers
   └─ Python → Flask → mcp-lite → bridge → Claude Desktop

8. User sees: Comprehensive answer with sources!

================================================================================
                            TECHNOLOGY STACK
================================================================================

Layer 1: Claude Desktop
├─ Anthropic's AI assistant
└─ MCP client via stdio

Layer 2: Protocol Bridge
├─ Node.js v22+
├─ @modelcontextprotocol/sdk v1.20
└─ Async/await for HTTP calls

Layer 3: mcp-lite Worker ⭐ HACK NIGHT REQUIREMENT
├─ TypeScript v5.7
├─ mcp-lite v0.8.2
├─ Cloudflare Workers runtime
└─ Wrangler v3.114 (dev server)

Layer 4: HTTP API Wrapper
├─ Python 3.10+
├─ Flask v3.1
├─ Flask-CORS v6.0
└─ python-dotenv

Layer 5: AI Backend
├─ weaviate-client v4.17
├─ openai v2.2 (GPT-4o)
└─ Existing PDF processing pipeline

================================================================================
                           KEY ACHIEVEMENTS
================================================================================

✅ mcp-lite + Cloudflare Workers (hack night requirement)
✅ Full stdio ↔ HTTP protocol bridging
✅ MCP interoperability (Python ↔ TypeScript)
✅ OpenAI Vision integration (multi-modal AI)
✅ Vector search (Weaviate semantic search)
✅ End-to-end working system
✅ ~500 lines of NEW code
✅ Built in ~2.5 hours
✅ Production-ready pattern

================================================================================
                              QUICK START
================================================================================

# Terminal 1: Python HTTP API
cd /path/to/cook_image_query_update
source .venv/bin/activate
python http_wrapper.py
# → Running on http://localhost:5001

# Terminal 2: mcp-lite Worker
cd /path/to/cook-mcp-wrapper
npm run dev
# → Running on http://localhost:8787

# Terminal 3: Test
cd /path/to/cook-mcp-wrapper
./test-mcp.sh
# → Tests all layers

# Use with Claude Desktop:
# 1. Edit: ~/Library/Application Support/Claude/claude_desktop_config.json
# 2. Restart Claude Desktop
# 3. See tools appear!

================================================================================
              World Wild Web MCP Hack Night - October 28, 2025
                         Cloudflare Austin, Texas
================================================================================
